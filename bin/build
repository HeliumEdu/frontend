#!/usr/bin/env bash

if [[ "$npm_command" != "run-script" ]] && [[ "$npm_command" != "run" ]]; then
  echo "This script must be run within npm. Try \`npm build-dev\` or \`make build-dev\` instead."
  exit 1;
fi

set -e

VERSION=$(node -p "require('./package.json').version")

echo "Building assets for $ENVIRONMENT with $VERSION ..."

mkdir -p build/assets/$VERSION


cp src/assets/*.* build/assets
cp -r src/assets/css build/assets/$VERSION
cp -r src/assets/img build/assets/$VERSION
cp -r src/assets/js build/assets/$VERSION

cp -r src/assets/img build/assets


if [[ -z "${FRONTEND_ROLLBAR_CLIENT_ITEM_ACCESS_TOKEN}" ]]; then
  echo "Building bundle without Rollbar"

  # If no client-side access token is in the env, store an empty file to disable Rollbar
  touch build/assets/$VERSION/js/rollbar.js
  rm build/assets/$VERSION/js/rollbar.tpl.js
else
  echo "Building Rollbar bundle with client token"

  sed "s/\${DIST_VERSION}/$VERSION/; s/\${DIST_ENV}/$ENVIRONMENT/; s/\${FRONTEND_ROLLBAR_CLIENT_ITEM_ACCESS_TOKEN}/$FRONTEND_ROLLBAR_CLIENT_ITEM_ACCESS_TOKEN/g" build/assets/$VERSION/js/rollbar.tpl.js > build/assets/$VERSION/js/rollbar.js
  rm build/assets/$VERSION/js/rollbar.tpl.js
fi

sed "s/\${DIST_VERSION}/$VERSION/g" build/assets/info.tpl.json > build/assets/info.json
rm build/assets/info.tpl.json

sed "s/\${DIST_VERSION}/$VERSION/g" config/nj_context.tpl.json > config/nj_context.json

if [[ "$ENVIRONMENT" != "local" ]]; then
  ./bin/compress

  find build/assets/$VERSION -type f -name '*.css' ! -name '*.min.css' -delete
  find build/assets/$VERSION -type f -name '*.js' ! -name '*.min.js' -delete

  rsync -avh build/assets/$VERSION/css/vendors/ build/assets/$VERSION/css
  rsync -avh build/assets/$VERSION/js/vendors/ build/assets/$VERSION/js
  rm -rf build/assets/$VERSION/js/vendors/
  rm -rf build/assets/$VERSION/css/vendors/
else
  cp build/assets/info.json build/info.html
fi

echo ""

nunjucks "*.html" config/nj_context.json -p src/templates --options config/nj_options.json -o build/

printf "\nMoving files in to place for paths, including trailing slash ...\n"

mkdir -p build/planner
# Ensure /contact links to /support
cp build/support.html build/contact.html
# Ensure trailing slash happiness on planner pages
mv build/planner_index.html build/planner/index.html
mv build/planner_calendar.html build/planner/calendar.html
mv build/planner_classes.html build/planner/classes.html
mv build/planner_materials.html build/planner/materials.html
mv build/planner_grades.html build/planner/grades.html
# Have invalid root URLs bring the user in to the /planner
cp build/planner/index.html build/calendar.html
cp build/planner/index.html build/planner.html
cp build/planner/index.html build/classes.html
cp build/planner/index.html build/materials.html
cp build/planner/index.html build/grades.html
cp build/planner/index.html build/app.html

find "build" -type f -not -path "build/assets/*" -print0 | while IFS= read -r -d $'\0' file; do
    path="${file#build/}"
    path_no_ext="${path%.*}"

    # Filter out error pages (which have all numeric values), and other special pages
    if [[ "$path_no_ext" =~ ^[0-9]+$ ]] || [[ "$path_no_ext" == "index" ]]; then
      continue
    fi

    echo "Processing file: $file"

    # Build out files so URIs work with and without trailing slash
    mkdir -p "build/$path_no_ext"
    cp $file "build/$path_no_ext/index.html"
done

# Pull top-level assets up
mv build/assets/favicon.ico build
mv build/assets/favicon.png build
mv build/assets/robots.txt build
mv build/assets/sitemap.xml build
