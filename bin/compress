#!/usr/bin/env python3

import json
import os
import subprocess

with open(os.path.join("config", "nj_context.json")) as context_file:
    context = json.loads(context_file.read())


def compress(paths, bundle_path):
    ext = os.path.splitext(bundle_path)[1].removeprefix(".")
    bundle_path_url = bundle_path.split(f"/{ext}/")[1]
    if ext == "css":
        subprocess.run(["cleancss", "-O1", "'all:on;specialComments:0'", "-o", f"{bundle_path}"] + paths, check=True)
    elif ext == "js":
        # TODO: introducing --compress causes issues with fullcalendar, but perhaps could be re-introduced later with some modification
        subprocess.run(["uglifyjs", "--mangle", "--source-map", f"url='{bundle_path_url}.map',includeSources", "-o",
                        f"{bundle_path}"] + paths, check=True)
    else:
        raise TypeError(f"Unsupported file type: {bundle_path}")


def combine_base_and_page(base_key, page_key, bundle_output_prefix, ext):
    """
    Combine all files in the base and page keys in to a single file, bundled in to a new entry that will be the only
    entry in the page key.
    """
    base_paths = []
    for file in context[base_key]:
        filename = os.path.join("build", "assets", context["PROJECT_VERSION"], *file.split("/"))
        base_paths.append(filename)

    compressed_base_bundle_path = os.path.join("build", "assets", context["PROJECT_VERSION"], ext,
                                               f"base.{bundle_output_prefix}.bundle.min.{ext}")
    compress(base_paths, compressed_base_bundle_path)
    print("Compressed " + str(len(context[base_key])) + f" files in to {compressed_base_bundle_path}")

    for page in context[page_key]:
        page_paths = base_paths.copy()
        for file in context[page_key][page]:
            filename = os.path.join("build", "assets", context["PROJECT_VERSION"], *file.split("/"))
            page_paths.append(filename)

        compressed_page_bundle_path = os.path.join("build", "assets", context["PROJECT_VERSION"], ext,
                                                   f"{page}.{bundle_output_prefix}.bundle.min.{ext}")
        compress(page_paths, compressed_page_bundle_path)
        print("Compressed " + str(
            len(context[base_key]) + len(context[page_key][page])) + f" files in to {compressed_page_bundle_path}")

        context[page_key][page] = [
            compressed_page_bundle_path.removeprefix(f"build/assets/{context['PROJECT_VERSION']}")]

    # If no page-specific entry exists, add one with just the base bundle
    for page in os.listdir(os.path.join("src", "templates")):
        if not page.endswith(".html"):
            continue

        page_name = page.removesuffix(".html")

        if page_name not in context[page_key].keys():
            context[page_key][page_name] = [
                compressed_base_bundle_path.removeprefix(f"build/assets/{context['PROJECT_VERSION']}")]

    # Clear out the base key, since all files are now compressed in to one under the page instead
    context[base_key] = []


def combine_group(key, bundle_output_prefix, ext, page=None):
    """
    Combine all files in the key in to a single file, bundled in to a new entry that will be the only
    entry in the page key.
    """
    if not page:
        files = context[key]
    else:
        files = context[key][page]

    paths = []
    for file in files:
        filename = os.path.join("build", "assets", context["PROJECT_VERSION"], *file.split("/"))
        paths.append(filename)

    bundle_name = f"{bundle_output_prefix}.bundle.min.{ext}"
    if page:
        bundle_name = f"{page}.{bundle_name}"

    compressed_bundle_path = os.path.join("build", "assets", context["PROJECT_VERSION"], ext, bundle_name)
    compress(paths, compressed_bundle_path)
    print("Compressed " + str(len(files)) + f" files in to {compressed_bundle_path}")
    if not page:
        context[key] = [compressed_bundle_path.removeprefix(f"build/assets/{context['PROJECT_VERSION']}")]
    else:
        context[key][page] = [compressed_bundle_path.removeprefix(f"build/assets/{context['PROJECT_VERSION']}")]


combine_base_and_page("base_header_javascript", "page_header_javascript", "header", "js")
combine_base_and_page("base_javascript", "page_javascript", "page", "js")

combine_base_and_page("base_stylesheet", "page_stylesheet", "page", "css")

for page in context["page_stylesheet_pre_base"]:
    combine_group("page_stylesheet_pre_base", "header", "css", page)
for page in context["page_stylesheet_pre_base_print"]:
    combine_group("page_stylesheet_pre_base_print", "header_print", "css", page)

# Write context with updated bundles back to Nunjucks config file
with open(os.path.join("config", "nj_context.json"), "w") as context_file:
    context_file.write(json.dumps(context, indent=4))
